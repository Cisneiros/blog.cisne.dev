{"template":"__react_static_root__/src/containers/post","sharedHashesByProp":{},"data":{"postData":{"title":"Tipos complexos de m√©tricas no Prometheus","date":"2020-06-30T00:00:00-03:00","slug":"tipos-complexos-de-metricas-no-prometheus","tags":["prometheus","monitoring"],"filePath":"2020-06-30-tipos-complexos-de-metricas-no-prometheus.md","content":"O Prometheus, [al√©m dos tipos primitivos de m√©tricas](/tipos-primitivos-de-metricas-no-prometheus/), possui dois tipos mais complexos para monitorar m√©tricas com mais nuances do que apenas contadores e medidas. Esses tipos s√£o o **histograma** e o **sum√°rio**. Eles s√£o parecidos no sentido de que d√° para fazer certas an√°lises em cima de ambos os tipos, mas possuem algumas diferen√ßas sut√≠s em que um pode ser melhor que o outro, a depender da situa√ß√£o.\n\n<!-- summary-break -->\n\n## üìä Histograma (histogram)\n\nQuem cursou alguma mat√©ria de estat√≠stica deve lembrar (ou n√£o) do que √© um histograma. Ele √© um **diagrama cuja √°rea de cada barra e proporcional a frequ√™ncia de uma vari√°vel** (a defini√ß√£o √© maior do que isso, mas para o que vamos falar aqui √© suficiente).\n\nNo contexto do Prometheus, um histograma √© uma maneira de monitorar **observa√ß√µes** de um evento. Mas um contador tamb√©m √©, e a√≠? A diferen√ßa √© que o histograma monitora a **distribui√ß√£o de valores observados**. Para isso, ele recebe uma defini√ß√£o de **intervalos** (chamados _buckets_). Cada intervalo vai gerar um **contador** separado, com uma dimens√£o `le` (menor ou igual, em ingl√™s _less than or equal_).\n\nSupondo que voc√™ tem uma m√©trica de lat√™ncia de requisi√ß√µes HTTP, e voc√™ quer monitorar monitorar qual o percentual destas requisi√ß√µes duram at√© 200 e at√© 500 milissegundos. Um histograma com com dois intervalos (at√© 200 ms e at√© 500 ms) vai te dar essa resposta. Note que, na verdade, h√° tr√™s intervalos pois automaticamente voc√™ vai ter um intervalo de **at√© infinito**, para registrar as ocorr√™ncias que n√£o est√£o dentro de nenhum dos intervalos que voc√™ definiu.\n\nDada uma distribui√ß√£o de lat√™ncias com essas dura√ß√µes, em milissegundos: `20, 30, 300, 200, 900, 500, 1200`, ter√≠amos as seguintes s√©ries temporais:\n\n| M√©trica                                           | Valor |\n|---------------------------------------------------|:-----:|\n| `http_request_duration_seconds_bucket{le=\"0.2\"}`  |   3   |\n| `http_request_duration_seconds_bucket{le=\"0.5\"}`  |   5   |\n| `http_request_duration_seconds_bucket{le=\"+Inf\"}` |   7   |\n| `http_request_duration_seconds_sum`               | 3150  |\n| `http_request_duration_seconds_count`             |   7   |\n\nNote que os intervalos s√£o **cumulativos**. Assim, caso queiramos saber o percentual de requisi√ß√µes que est√° abaixo de 500 ms, podemos pensar em fazer a query:\n\n```promql\nhttp_request_duration_seconds_bucket{le=\"0.5\"}\n/\nhttp_request_duration_seconds_bucket{le=\"+Inf\"}\n```\n\nNote que, na pr√°tica, podemos ter v√°rias **outras dimens√µes** que podem ser agrupadas. Por exemplo, se uma dimens√£o for o caminho da requisi√ß√£o, a consulta acima vai retornar uma s√©rie temporal para cada combina√ß√£o de `le` e `path`. \n\n| M√©trica                                                         | Valor |\n|-----------------------------------------------------------------|:-----:|\n| `http_request_duration_seconds_bucket{path=\"/\", le=\"0.2\"}`      |   3   |\n| `http_request_duration_seconds_bucket{path=\"/\", le=\"0.5\"}`      |   5   |\n| `http_request_duration_seconds_bucket{path=\"/\", le=\"+Inf\"}`     |   7   |\n| `http_request_duration_seconds_sum{path=\"/\"}`                   | 3150  |\n| `http_request_duration_seconds_count{path=\"/\"}`                 |   7   |\n| `http_request_duration_seconds_bucket{path=\"/help\", le=\"0.2\"}`  |   2   |\n| `http_request_duration_seconds_bucket{path=\"/help\", le=\"0.5\"}`  |  10   |\n| `http_request_duration_seconds_bucket{path=\"/help\", le=\"+Inf\"}` |  18   |\n| `http_request_duration_seconds_sum{path=\"/help\"}`               | 4125  |\n| `http_request_duration_seconds_count{path=\"/help\"}`             |  18   |\n\nSe adicionarmos o c√≥digo de retorno, √© mais uma dimens√£o para multiplicar a quantidade de s√©ries temporais retornadas. Al√©m disso, faz sentido olhar para essa m√©trica numa **janela deslizante** (por exemplo, os √∫ltimos 5 minutos). Do contr√°rio, vamos analisar valores desde que a aplica√ß√£o come√ßou a rodar. Podemos agrupar com `sum` e analisar ao longo do tempo com `rate`.\n\n```promql\nsum(rate(http_request_duration_seconds_bucket{le=\"0.5\"}[10m]))\n/\nsum(rate(http_request_duration_seconds_count[10m]))\n```\n\nComo estamos agregando, podemos dividir tanto pelo _bucket_ de limite infinito como pela m√©trica `_count`, pois o `sum` vai tirar as dimens√µes. Se tent√°ssemos usar o `_count` no primeiro exemplo, n√£o iria funcionar pois essa m√©trica n√£o tem a dimens√£o `le`, ent√£o a divis√£o n√£o iria acontecer. O intervalo com limite infinito e a m√©trica `_count` v√£o ter sempre o mesmo valor.\n\n\n## üìâ Sum√°rio (summary)\n\nNo Prometheus, um sum√°rio √© usado principalmente para **caulcular percentis** (voltando √† aula de estat√≠stica). Um percentil √© um valor que divide a popula√ß√£o de acordo com a distribui√ß√£o de valores de uma vari√°vel. Em outras palavras, usamos percentis quando queremos saber **qual o maior valor que um percentual dos eventos tem**.\n\nUm percentil muito conhecido √© o percentil 50 (ou `p50`). Ele √© a **mediana** de um conjunto de valores. Dizer que a mediana, ou p50, de um conjunto √© 10 significa que 50% dos valores √© menor ou igual a 10. O uso de percentis √© interessante pois, diferentemente da m√©dia aritim√©tica, os percentis descartam valores excepcionalmente discrepantes mais facilmente. \n\nEstes percentis s√£o calculados do **cliente** (ou seja, na aplica√ß√£o que est√° gerando as m√©tricas) e s√£o pr√©-definidos por voc√™. Para cada percentil escolhido, o cliente do Prometheus vai gerar uma m√©trica com uma dimens√£o `quantile` (variando de 0 a 1, inclusive). Usando poucas observa√ß√µes √© mais chato dar um exemplo num√©rico, mas as s√©ries temporais geradas a partir de um sum√°rio v√£o parecer com essas, dada a escolha dos percentis 50, 90 e 95:\n\n| M√©trica                                          | Valor |\n|--------------------------------------------------|:-----:|\n| `http_request_duration_seconds{quantile=\"0.5\"}`  |  50   |\n| `http_request_duration_seconds{quantile=\"0.9\"}`  |  135  |\n| `http_request_duration_seconds{quantile=\"0.95\"}` |  450  |\n| `http_request_duration_seconds_sum`              | 72843 |\n| `http_request_duration_seconds_count`            |  40   |\n\nNote que o sum√°rio tamb√©m exp√µe duas m√©tricas adicionais, `_sum` e `_count`. Com elas, assim como nas do histograma, podemos calcular uma m√©dia aritim√©tica simples. J√° os percentis j√° est√£o calculados, e n√£o precisamos fazer nenhuma agrega√ß√£o. Ali√°s, n√£o s√≥ n√£o precisamos como **n√£o podemos**.\n\nDeixa eu dizer mais alto pra galera l√° atr√°s: **n√£o podemos agregar percentis**. [Agrega√ß√µes de percentis n√£o t√™m significado](https://latencytipoftheday.blogspot.de/2014/06/latencytipoftheday-you-cant-average.html). Isso quer dizer que, ao utilizar um sum√°rio (que nos d√° percentis), n√≥s n√£o podemos somar, tirar alguma outra m√©dia (aritim√©tica ou at√© outro percentil), e por a√≠ vai. **N√£o sucumba √† tenta√ß√£o.**\n\nIsso tamb√©m implica nossas m√©tricas precisarem ser geradas apenas com as dimens√µes necess√°rias desde o in√≠cio, pois na hora da consulta n√£o podemos juntar os percentis, por exemplo, de todos os c√≥digos de resposta numa m√©trica de percentil s√≥. Se queremos analisar essa m√©trica deste jeito, o cliente (nossa aplica√ß√£o) deve report√°-la sem separar por esta dimens√£o.\n\nE se voc√™ quiser ter mais flexibilidade? Podemos calcular percentis com um outro tipo de m√©trica no Prometheus. E voc√™ j√° conhece ela.\n\n## üìä Histograma 2: O Inimigo Agora √© Outro\n\nOs histogramas podem ser usados para estimar, de maneira razoavel, percentis **em tempo de consulta**. Ou seja, podemos usar as s√©ries temporais de uma m√©trica do tipo histograma para calcular uma s√©rie temporal que representa um percentil. \n\nO Prometheus tem uma fun√ß√£o para isso, a `histogram_quantile`. Ela recebe um histograma (ou seja, uma lista de s√©ries temporais com a dimens√£o `le`) e um quantil (um n√∫mero de 0 a 1, inclusive, como no sum√°rio). Usando as m√©tricas do primeiro exemplo com histograma, podemos fazer uma consulta do `p90` considerando uma janela de 10 minutos assim:\n\n```promql\nhistogram_quantile(0.9, rate(http_request_duration_seconds_bucket[10m])\n```\n\nO exemplo acima n√£o tem uma agrega√ß√£o, como somar os intervalos. Para agrupar todas as dimens√µes, podemos usar o `sum` novamente. Por√©m, dessa vez, precisamos **manter o agrupamento por intervalo (`le`)**. Do contr√°rio, a fun√ß√£o `histogram_quantile` n√£o vai funcionar.\n\n```promql\nhistogram_quantile(0.9, sum(rate(http_request_duration_seconds_bucket[10m]) by (le))\n```\n\nCaso queiramos ter mais de um percentil com mesmo valor retornado, separado por uma dimens√£o espec√≠fica (por exemplo, `status_code`), podemos adicion√°-lo no agrupamento com o `le`.\n\n```promql\nhistogram_quantile(0.9, sum(rate(http_request_duration_seconds_bucket[10m]) by (status_code, le))\n```\n\n√â importante ressaltar que os percentis que temos aqui s√£o **aproximados**. No caso dos calculados a partir do histograma, a qualidade da aproxima√ß√£o depende da escolha dos intervalos. O ideal √© que os intervalos consigam representar bem a distribui√ß√£o dos valores. Se todas as observa√ß√µes ca√≠rem em um _bucket_ s√≥, o c√°lculo do percentil n√£o vai ser realista. \n\nDito isso, faz se voc√™ quer agregar os dados e calcular percentis diferentes em tempo de consulta, **histogramas s√£o a √∫nica maneira v√°lida**. Do contr√°rio, histograma e sum√°rio funcionam. Se voc√™ consegue estimar valores para os intervalos do histograma que representam bem a poss√≠vel distribui√ß√£o dos valores observados, use um histograma pois voc√™ tem bem mais flexibilidade para criar consultas e alertas sem mexer na aplica√ß√£o. Se voc√™ precisa de percentis mais precisos, e pode definir em quais percentis tem interesse a nivel da aplica√ß√£o, o sum√°rio vai te servir bem.\n\nA documenta√ß√£o do Prometheus tem uma [p√°gina dedicada a histogramas e sum√°rios](https://prometheus.io/docs/practices/histograms/) que fala bastante sobre o que a gente viu aqui. Caso queira ler mais sobre as diferen√ßas entre essas m√©tricas, ela √© um bom recurso!\n","readingTime":7,"summary":"O Prometheus, [al√©m dos tipos primitivos de m√©tricas](/tipos-primitivos-de-metricas-no-prometheus/), possui dois tipos mais complexos para monitorar m√©tricas com mais nuances do que apenas contadores e medidas. Esses tipos s√£o o **histograma** e o **sum√°rio**. Eles s√£o parecidos no sentido de que d√° para fazer certas an√°lises em cima de ambos os tipos, mas possuem algumas diferen√ßas sut√≠s em que um pode ser melhor que o outro, a depender da situa√ß√£o.\n\n"}},"path":"tipos-complexos-de-metricas-no-prometheus"}
