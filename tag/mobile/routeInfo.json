{"template":"__react_static_root__/src/containers/postList","sharedHashesByProp":{},"data":{"postDataList":[{"title":"De zero a heroi: Hero animations em Flutter","date":"2020-08-31T00:00:00-03:00","slug":"de-zero-a-heroi-hero-animations-em-flutter","tags":["flutter","mobile"],"filePath":"2020-08-31-de-zero-a-heroi-hero-animations-em-flutter.md","content":null,"readingTime":17,"summary":"Animações são uma excelente maneira de tornar um app mais interativo e engajar os usuários. Flutter tem várias opções para criar animações, com diferentes níveis de complexididade. Uma das (se não a) mais simples são as **Hero animations**, que, com apenas um widget, permitem animar um componente durante a transição entre duas telas. Vamos ver como fazer uma animação super rápida e explorar possibilidades mais avançadas para criar animações mais complexas com essa ferramenta.\n\n"},{"title":"Navegação por rotas em Flutter usando o Nuvigator","date":"2020-08-12T00:00:00-03:00","slug":"navegacao-por-rotas-em-flutter-usando-o-nuvigator","tags":["flutter","mobile"],"filePath":"2020-08-12-navegacao-por-rotas-em-flutter-usando-o-nuvigator.md","content":null,"readingTime":12,"summary":"Um dos aspectos mais importantes de um app é a **navegação entre telas**. Na web, isso é feito através de links (e, com a alta dos frameworks de front-end JavaScript, reimplementando esta navegação no cliente). Num app em Flutter, existem funções de navegação para transicionar de uma tela para outra. Com elas é possível empilhar, substituir e remover telas criando o próprio widget da tela seguinte nestas funções.\n\nO **Nuvigator** surgiu como uma abstração em cima desse roteamento do Flutter para facilitar a declaração e reutilização destas rotas, o que é bem útil conforme o app cresce e tem mais partes que interagem. Trouxe uma introdução a como ele funciona neste post!\n\n"},{"title":"Melhorando acessibilidade de linhas e colunas em Flutter","date":"2020-07-27T00:00:00-03:00","slug":"melhorando-acessibilidade-de-linhas-e-colunas-em-flutter","tags":["acessibilidade","flutter","voiceover","mobile"],"filePath":"2020-07-27-melhorando-acessibilidade-de-linhas-e-colunas-em-flutter.md","content":null,"readingTime":7,"summary":"Flutter parte do princpípio de \"tudo é um widget!\", e isso inclui as primitivas de layout, como `Row` e `Column`. Com essas ferramentas bem simples, conseguimos criar vários tipos de layout. Porém, nem sempre a maneira com que algo é **visualmente disposto** bate com **a ordem e agrupamento semântico**. Estava fazendo um app em Flutter e, ao tentar usá-lo com o VoiceOver (leitor de tela do iPhone, usado normalmente por pessoas com deficiência visual), percebi que ele lia alguns conteúdos numa ordem ruim. Vamos ver o que precisei fazer para consertar isso — é mais fácil do que parece!\n\n"}],"pagination":{"current":1,"count":1}},"path":"tag/mobile"}
