{"template":"__react_static_root__/src/containers/post","sharedHashesByProp":{},"data":{"postData":{"title":"Desmistificando o margin collapsing do CSS","date":"2020-08-03T00:00:00-03:00","slug":"desmistificando-o-margin-collapsing-do-css","tags":["css","frontend"],"filePath":"2020-08-03-desmistificando-o-margin-collapsing-do-css.md","content":"Um comportamento que de vez em quando me pega desprevinido de CSS é o _margin collapsing_ (literalmente, \"desmoronamento das margens\", na falta de uma tradução melhor), que é a combinação de duas margens adjacentes em uma só. É algo que faz parte da especificação mas muitas vezes passa despercebido. Agora, quando isso interfere no que queremos fazer, se você não souber o que é e como funciona, vai quebrar a cabeça para desvendar **por que suas margens desaparecem**. Trouxe a definição de em quais casos suas margens podem sumir e alguns exemplos para ajudar a visualizar cada um!\n\n<!-- summary-break -->\n\nVamos começar definindo o que é margin collapsing: é a junção de duas margens adjacentes de CSS em uma só, **resultando apenas na maior das margens existindo**. Ou seja, nesta situação, uma das duas margens adjacentes vai **desaparecer**.\n\nHá três situações em que estas margens adjacentes são criadas. Vamos olhar cada uma delas.\n\n## Elementos irmãos adjacentes\n\nSe você tem dois elementos imediatamente adjacentes, ou seja, sem nada entre eles, e ambos têm margens que se encostam (por exemplo, o de cima tem `margin-bottom` e o de baixo tem `margin-top`), estas margens serão combinadas e uma delas vai se perder (a menor). Vamos ver um exemplo:\n\n:::live\n```html\n<div class=\"bar\"></div>\n<div class=\"bar\"></div>\n```\n\n```css\n.bar {\n  margin: 1em 0;\n  width: 10em;\n  height: 1em;\n  background-color: tomato;\n}\n```\n:::/live\n\nNo exemplo acima, temos duas `div`s que têm `1em` de altura. Elas também tem o mesmo tamanho (`1em`) de margem para cima e para baixo. Talvez você esperasse que, como o elemento de cima tem uma margem de `1em` para baixo e o elemento de baixo tem uma margem de `1em` para cima, que o espaçamento resultante fosse a soma, ou seja, `2em`. Isso não acontece, e você pode notar que a separação entre os elementos tem o mesmo tamanho que a altura de cada um eles.\n\nO tamanho das margens não precisa ser o mesmo, como foi no exemplo. Caso as margens tenham tamanhos diferentes, a maior vai prevalecer, como podemos ver abaixo:\n\n:::live\n```html\n<div class=\"bar top\"></div>\n<div class=\"bar bottom\"></div>\n```\n\n```css\n.bar {\n  width: 10em;\n  height: 1em;\n  background-color: forestgreen;\n}\n\n.top {\n  margin-bottom: 1em;\n}\n\n.bottom {\n  margin-top: 2em; /* Esta é maior */\n}\n```\n:::/live\n\nNeste caso, a margem resultante foi `2em` (e não `3em` que seria caso fossem somadas). Essa diferença de tamanho é um pouco mais chata de perceber só olhando, mas se você estiver num PC, use o inspetor do navegador para verificar e confirmar o tamanho da margem resultante.\n\n## Pai e filho sem separação\n\nQuando um elemento pai tem uma margem que está adjacente a margem de um elemento filho e **não há nada entre essas margens**, como uma `border` ou `padding` do elemento pai, haverá também a junção das margens. Por exemplo, se temos um elemento pai com `margin-bottom` e seu último filho também tem `margin-bottom`, é preciso que haja alguma separação entre as margens para quem as duas existam.\n\n:::live\n```html\n<div class=\"parent\">\n  <div class=\"child\">A margem deste filho é maior que a do pai e vai substitui-la.</div>\n</div>\n\n<div class=\"outsider\">A margem acima é apenas a o filho, de 2em.</div>\n```\n\n```css\n.parent {\n  margin-bottom: 1em;\n  background-color: lavender;\n}\n\n.child {\n  margin-bottom: 2em;\n  border: solid 3px indigo;\n  color: indigo;\n}\n\n.outsider {\n  border: solid 3px purple;\n  color: purple;\n}\n```\n:::/live\n\nNo exemplo acima, temos um elemento `.parent` que tem uma `margin-bottom` de `1em`. Seu filho, `.child`, também tem uma `margin-bottom`, que neste caso é maior que a do pai (`2em`). Como nos outros exemplos, a maior margem vai prevalecer. Mas é interessante notar que a margem maior **é aplicada ao parente e não ao descendente**, ou seja, ela existe do lado de fora do pai. Por isso que a cor de fundo do elemento pai não se estende abaixo do filho.\n\nSe separássemos as margens do pai e do filho, por exemplo, colocando uma borda no elemento pai, essas margens não se juntariam mais. Vamos testar modificando o exemplo anterior:\n\n:::live\n```html\n<div class=\"parent\">\n  <div class=\"child\">A margem deste filho é maior que a do pai mas agora elas estão separadas.</div>\n</div>\n\n<div class=\"outsider\">Existem duas margens acima, de 2em no filho e 1em no pai.</div>\n```\n\n```css\n.parent {\n  margin-bottom: 1em;\n  border: solid 3px orange; /* Isso separa as margens */\n  background-color: lemonchiffon;\n}\n\n.child {\n  margin-bottom: 2em;\n  border: solid 3px peru;\n  color: peru;\n}\n\n.outsider {\n  border: solid 3px sandybrown;\n  color: sandybrown;\n}\n```\n:::/live\n\nOutros itens que separem as duas margens também impediriam o margin collapsing de acontecer, como um `padding` no elemento pai, um elemento inline (como um texto) após o elemento filho (mas ainda dentro do pai), uma altura (`height` ou `min-height`) no elemento pai que separe as duas margens, e por aí vai.\n\n## Um bloco sem conteúdo\n\nUm elemento que esteja vazio, ou seja, que não tenha `padding`, `border`, altura ou conteúdo inline como texto, caso tenha margens, estas estarão adjacentes, pois não haverá nada para separar a `margin-top` da `margin-bottom` do elemento. Neste caso, o margin collapsing vai acontecer. Vamos de exemplo:\n\n:::live\n```html\n<div class=\"bar\"></div>\n<div class=\"empty\"></div>\n<div class=\"bar\"></div>\n```\n\n```css\n.bar {\n  width: 10em;\n  height: 1em;\n  background-color: steelblue;\n}\n\n.empty {\n  margin: 1em 0;\n}\n```\n:::/live\n\nNeste caso, o elemento `.empty` possui margem superior e inferior de `1em` cada. Porém, como ele não tem nenhum conteúdo, essas duas margens se encostam e viram uma só com o tamanho da maior (como são iguais, a margem resultante é `1em`). O resultado é bem similar ao primeiro exemplo, mas dessa vez o margin collapsing aconteceu entre duas margens do mesmo elemento, ao invés de elementos irmãos.\n\nAssim como no exemplo antes deste, se o elemento vazio separar as margens de alguma maneira (e deixar de ser vazio, no caso), as duas passarão a existir separadamente:\n\n:::live\n```html\n<div class=\"bar\"></div>\n<div class=\"not-empty\"></div>\n<div class=\"bar\"></div>\n```\n\n```css\n.bar {\n  width: 10em;\n  height: 1em;\n  background-color: crimson;\n}\n\n.not-empty {\n  margin: 1em 0;\n  height: 1px; /* Isso separa as margens */\n  background-color: pink;\n}\n```\n:::/live\n\nA mudança no exemplo acima foi apenas a adição de uma altura, neste caso de apenas `1px`. Isso é suficiente para separar as duas margens e impedir o margin collapsing. Eu coloquei uma `background-color` apenas para facilitar a visualização das duas margens separadas, mas **ela não faz diferença no margin collapsing**. Mesmo sem a cor, as bordas estariam separadas por conta da altura. Um texto dentro do elemento seria também evitaria que as bordas se juntassem.\n\n## Alguns detalhes a mais\n\nNos exemplos deste post, vimos que duas margens imediatamente adjacentes vão ser juntadas em uma só e o tamanho da margem resultante é o maior tamanho entre elas. Mas este efeito não é limitado a duas margens apenas. Podemos, por exemplo, combinar todos os casos acima para mostrar várias margens que vão ser juntas em uma só:\n\n:::live\n```html\n<div class=\"bar\"></div>\n<div class=\"empty\"></div>\n<div class=\"empty\"></div>\n<div class=\"empty\"></div>\n<div class=\"empty\">\n  <div class=\"empty\"></div>\n  <div class=\"empty\"></div>\n</div>\n<div class=\"empty\"></div>\n<div class=\"bar\"></div>\n```\n\n```css\n.bar {\n  width: 10em;\n  height: 1em;\n  background-color: limegreen;\n}\n\n.empty {\n  margin: 1em 0;\n}\n```\n:::/live\n\nPra finalizar, vale mencionar que as margens afetadas por este efeito nem sempre serão positivas. Por exemplo, podemos ter um elemento filho com margem positiva e um elemento pai com **margem zero**: o margin collapsing vai colocar a margem positiva **no pai** caso o filho seja o último elemento do pai e não haja nada separando a margem dele do ponto em que a margem (originalmente zero) do pai deveria estar.\n\n:::live\n```html\n<div class=\"parent\">\n  <div class=\"child\">Este filho tem margem, mas ela vai ser aplicada no pai.</div>\n</div>\n\n<div class=\"outsider\">A margem do filho foi aplicada acima.</div>\n```\n\n```css\n.parent {\n  margin-bottom: 0; /* Zero */\n  background-color: lavenderblush;\n}\n\n.child {\n  margin-bottom: 2em;\n  border: solid 3px mediumvioletred;\n  color: mediumvioletred;\n}\n\n.outsider {\n  border: solid 3px orchid;\n  color: orchid;\n}\n```\n:::/live\n\nSe você usar o inspetor no exemplo acima, vai ver que a altura do pai não aumentou para acomodar a margem do filho (e, por isso, a cor de fundo do pai não se estende além da altura do filho).\n\nE quanto a **margens negativas**? Elas existem, e são confusas ao ponto de merecer uma discussão separada só sobre elas. Mas, especificamente no caso de margin collapsing, há duas possibilidades.\n\nSe houver margens positivas e negativas, a margem resultante e a soma da maior margem com a menor margem (a \"mais positiva\" + a \"mais negativa\"). No exemplo abaixo, temos como margem resultante entre os elementos `1em + (-2em) = -1em`.\n\n:::live\n```html\n<div class=\"bar top\"></div>\n<div class=\"bar bottom\"></div>\n```\n\n```css\n.bar {\n  height: 3em;\n}\n\n.top {\n  width: 10em;\n  margin-bottom: 1em; /* Positiva */\n  background-color: lightseagreen;\n}\n\n.bottom {\n  width: 5em;\n  margin-top: -2em; /* Negativa */\n  background-color: lightgreen;\n}\n```\n:::/live\n\nSe houver apenas margens negativas, a margem resultante é a menor margem (a \"mais negativa\" entre elas). No próximo exemplo, a menor (mais negativa) entre `-1em` e `-2em` vai prevalecer, tendo como margem resultante `-2em`.\n\n:::live\n```html\n<div class=\"bar top\"></div>\n<div class=\"bar bottom\"></div>\n```\n\n```css\n.bar {\n  height: 3em;\n}\n\n.top {\n  width: 10em;\n  margin-bottom: -1em; /* Negativa */\n  background-color: olivedrab;\n}\n\n.bottom {\n  width: 5em;\n  margin-top: -2em; /* Negativa */\n  background-color: yellowgreen;\n}\n```\n:::/live\n\nQuando você não sabe que margin collapsing existe, ela te pega de surpresa e você pode passar horas para tentar entender pra onde suas margens estão desaparecendo. Mas não tem muito mistério quando você entende o funcionamento! Espero que os exemplos deste post tenham sido mais esclarecedores do que confusos 😅. Se quiser ler mais, a [documentação de margin collapsing na MDN](https://developer.mozilla.org/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing) fala destes casos e tem links para algumas definições mais específicas do que pode ou não separar duas margens.\n\n---\n\n## Topa um exercício?\n\nAqui vão alguns exemplos de código para você praticar o que vimos acima, se quiser.\n\n:::quiz\n### Qual é o espaçamento entre as barras?\n\n```html\n<div class=\"bar\"></div>\n<div class=\"bar\"></div>\n```\n\n```css\n.bar {\n  margin: 1em 0;\n  width: 10em;\n  height: 1em;\n  background-color: tomato;\n}\n```\n\n- As barras têm `1em` de espaçamento entre elas\n- As barras têm `2em` de espaçamento entre elas\n- As barras não têm espaçamento entre elas\n\n> A margem inferior da barra de cima vai se juntar com a margem superior da barra de baixo. A margem resultante é a maior entre as duas (como são iguais, é o valor de uma delas), ou seja, `1em`.\n:::/quiz\n\n:::quiz\n### O que causaria um espaçamento de pelo menos `2em` entre as barras?\n\n```html\n<div class=\"bar\"></div>\n<div class=\"empty\"></div>\n<div class=\"bar\"></div>\n```\n\n```css\n.bar {\n  width: 10em;\n  height: 1em;\n  background-color: steelblue;\n}\n\n.empty {\n  margin: 1em 0;\n}\n```\n\n- Colocar um `padding` maior que zero em `.empty`\n- Colocar mais um `div` com a classe `empty` no HTML\n- Aumentar o `height` das barras\n- Nenhuma das alternativas\n\n> O elemento com a classe `empty` não tem conteúdo, e suas margens superior e inferior são adjacentes. Isso vai juntá-las em uma única margem de `1em`. Caso houvesse `padding` dentro deste elemento, isso separaria as margens e as duas existiriam separadamente, deixando o espaçamento entre as barras como `2em` (mais o `padding` adicionado).\n:::/quiz\n\n:::quiz\n### Qual é o resultado deste código?\n\n```html\n<div class=\"bar top\"></div>\n<div class=\"bar bottom\"></div>\n```\n\n```css\n.bar {\n  height: 3em;\n}\n\n.top {\n  width: 10em;\n  margin-bottom: -1em;\n  background-color: olivedrab; /* Verde-escuro */\n}\n\n.bottom {\n  width: 5em;\n  margin-top: -3em;\n  background-color: yellowgreen; /* Verde-claro */\n}\n```\n\n- ![O elemento de baixo aparece exatamente na mesma altura que o elemento de cima](/media/margin-collapsing-1.png)\n- ![O elemento de baixo aparece um pouco mais alto que o elemento de cima](/media/margin-collapsing-2.png)\n- ![O elemento de baixo aparece um pouco mais baixo que o elemento de cima](/media/margin-collapsing-3.png)\n\n> As duas margens adjacentes são negativas. Neste caso, apenas uma vai prevalecer, a menor entre elas (a \"mais negativa\"), que é `-3em`. Por isso, o elemento de baixo vai subir `3em`, que é exatamente a sua altura (e a altura do elemento de cima, também), fazendo que fique um em cima do outro. Como o elemento de baixo é mais estreito (`width` menor), ele não cobre o outro totalmente e podemos ver o elemento de cima no fundo.\n:::/quiz\n","readingTime":11,"summary":"Um comportamento que de vez em quando me pega desprevinido de CSS é o _margin collapsing_ (literalmente, \"desmoronamento das margens\", na falta de uma tradução melhor), que é a combinação de duas margens adjacentes em uma só. É algo que faz parte da especificação mas muitas vezes passa despercebido. Agora, quando isso interfere no que queremos fazer, se você não souber o que é e como funciona, vai quebrar a cabeça para desvendar **por que suas margens desaparecem**. Trouxe a definição de em quais casos suas margens podem sumir e alguns exemplos para ajudar a visualizar cada um!\n\n"}},"path":"desmistificando-o-margin-collapsing-do-css"}
