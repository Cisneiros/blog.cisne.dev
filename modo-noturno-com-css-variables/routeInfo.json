{"template":"__react_static_root__/src/containers/post","sharedHashesByProp":{},"data":{"postData":{"title":"Modo noturno com CSS variables","date":"2020-07-16T00:00:00-03:00","slug":"modo-noturno-com-css-variables","tags":["css","javascript","frontend"],"filePath":"2020-07-16-modo-noturno-com-css-variables.md","content":"Quase todo sistema operacional hoje vem com suporte a definir um n√≠vel de \"brilho\" da interface, que geralmente tem dois valores: claro e escuro (light ou dark). As implementa√ß√µes modernas de CSS incluem suporte a verificar qual a prefer√™ncia do usu√°rio, se houver, e adaptar sua interface de acordo. Vamos implementar um modo noturno com CSS, usando CSS variables para deixar o c√≥digo mais escal√°vel e menos repetitivo!\n\n<!-- summary-break -->\n\nA ideia √© usar a **media query** chamada `preferes-color-scheme`. No caso do blog, defini que o modo padr√£o √© o claro e que o modo escuro vai ser ativado s√≥ se o usu√°rio definiu no sistema dele que quer esse modo. Para fins desse exemplo, vou usar uma `div` com id `#root-1`, mas nada impede de voc√™ adicionar as propriedades direto no `html`, como eu fiz na vers√£o est√°tica do c√≥digo-fonte desse blog.\n\nVamos definir vari√°veis para nossas cores claras e escuras. Depois, vamos criar outras vari√°veis que v√£o usar as primeiras, mas ao inv√©s de representarem uma cor, elas representam um conceito da interface, como o plano de fundo e o de frente. Por fim, usamos a media query para alterar estas vari√°veis caso o usu√°rio use um tema escuro. No exemplo abaixo, voc√™ vai ver o resulado claro ou escuro, de acordo com a configura√ß√£o do seu sistema.\n\n:::live\n```css\n#root-1 {\n  /* Definindo as vari√°veis */\n  --color-light: #e0e0ff;\n  --color-dark: #050535;\n  --icon-light: '‚òÄÔ∏è';\n  --icon-dark: 'üåô';\n\n  /* Por padr√£o, usamos o tema claro */\n  --color-background: var(--color-light);\n  --color-foreground: var(--color-dark);\n  --icon: var(--icon-light);\n\n  color: var(--color-foreground);\n  background-color: var(--color-background);\n  padding: 1em;\n  border-radius: 1em;\n}\n\n#root-1::before {\n  content: var(--icon);\n}\n\n@media (prefers-color-scheme: dark) {\n  #root-1 {\n    /* Apenas muda as vari√°veis para o tema escuro */\n    --color-background: var(--color-dark);\n    --color-foreground: var(--color-light);\n    --icon: var(--icon-dark);\n  }\n}\n```\n```html\n<div id=\"root-1\">\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  Nulla quis augue ipsum. Aenean euismod sit amet urna sed\n  pharetra. Curabitur felis turpis, tincidunt quis metus\n  tincidunt, tempor molestie augue. Proin elementum viverra\n  vestibulum.\n</div>\n```\n:::/live\n\nN√£o tem muito mist√©rio! Para dar um _tchan_, coloquei um pseudoelemento `::before`, definindo o conte√∫do dele tamb√©m via CSS, com os emoji de sol e lua, de acordo com o modo selecionado. Para ver a mudan√ßa, v√° nas configura√ß√µes do seu sistema operacional e ative/desative o modo noturno. **Eu sei que voc√™ est√° com pregui√ßa de ir l√° trocar**, ent√£o eu fiz um GIF para provar que funciona mesmo.\n\n![Imagem mostrando o modo noturno no macOS sendo ativado e desativado, e o resultado do exemplo acima mudando de tema corretamente](/media/dark-mode.gif)\n\nComo o CSS est√° em fun√ß√£o da media query, n√£o h√° uma maneira direta para o usu√°rio alterar o tema no site sem mexer na configura√ß√£o do seu sistema operacional ou navegador. Uma op√ß√£o (que eu uso no blog) √© permitir o usu√°rio **trocar de tema manualmente**. Nesse caso, √© preciso persistir que o usu√°rio fez a mudan√ßa e sobrescrever de alguma maneira o comportamento do CSS, ignorando o efeito da media query. Para isso, podemos usar JavaScript, adicionando uma classe no elemento raiz para determinar o tema. Como classes ter√£o uma prioridade maior que a media query, esta ser√° ignorada.\n\n:::live\n```css\n#root-2 {\n  /* Definindo as vari√°veis */\n  --color-light: #e0e0ff;\n  --color-dark: #050535;\n  --icon-light: '‚òÄÔ∏è';\n  --icon-dark: 'üåô';\n\n  color: var(--color-foreground);\n  background-color: var(--color-background);\n  padding: 1em;\n  border-radius: 1em;\n  cursor: pointer;\n}\n\n#root-2::before {\n  content: var(--icon);\n}\n\n#root-2, #root-2.light {\n  /* Por padr√£o, usamos o tema claro */\n  --color-background: var(--color-light);\n  --color-foreground: var(--color-dark);\n  --icon: var(--icon-light);\n}\n\n#root-2.dark {\n  /* Apenas muda as vari√°veis para o tema escuro */\n  --color-background: var(--color-dark);\n  --color-foreground: var(--color-light);\n  --icon: var(--icon-dark);\n}\n\n@media (prefers-color-scheme: dark) {\n  #root-2 {\n    /* Apenas muda as vari√°veis para o tema escuro */\n    --color-background: var(--color-dark);\n    --color-foreground: var(--color-light);\n    --icon: var(--icon-dark);\n  }\n}\n```\n```html\n<div id=\"root-2\">\n  Clique aqui para mudar o tema\n</div>\n```\n```js auto-run\nconst root = document.querySelector('#root-2')\n\nroot.addEventListener('click', _ => {\n  if (root.classList.contains('dark')) {\n    root.classList.add('light')\n    root.classList.remove('dark')\n  } else {\n    root.classList.add('dark')\n    root.classList.remove('light')\n  }\n})\n```\n:::/live\n\nNote que, se o seu sistema est√° com tema escuro selecionado, voc√™ vai precisar **clicar duas vezes** no exemplo para trocar de tema, na primeira intera√ß√£o. Isso acontece pois, inicialmente, n√£o h√° classe na raiz. Uma maneira de resolver isso √© tendo bot√µes separados para mudar o tema, e exibir apenas um deles de acordo com o tema atual. \n\nOutro ponto √© que n√£o estamos **persistindo** a escolha do tema, ent√£o se o usu√°rio recarregar ou mudar de p√°gina, ele vai voltar para o modo claro ou escuro, de acordo com o sistema operacional. D√° para resolver isso armazenando a prefer√™ncia no **local storage** do naveador. √â assim que eu fa√ßo nesse blog. Quando a pessoa entra pela primeira vez, o padr√£o vai ser o do sistema dela, atrav√©s da media query. Se ela escolher trocar de tema, a op√ß√£o vai ficar salva no local storage e vai ser usada em futuras visitas.\n\n**√â isso!** Estou experimentando com esse formato de tutoriais com exemplos no meio do texto. Naturalmente funciona melhor com ideias bem visuais de front-end, como essa. At√© a pr√≥xima!\n","readingTime":5,"summary":"Quase todo sistema operacional hoje vem com suporte a definir um n√≠vel de \"brilho\" da interface, que geralmente tem dois valores: claro e escuro (light ou dark). As implementa√ß√µes modernas de CSS incluem suporte a verificar qual a prefer√™ncia do usu√°rio, se houver, e adaptar sua interface de acordo. Vamos implementar um modo noturno com CSS, usando CSS variables para deixar o c√≥digo mais escal√°vel e menos repetitivo!\n\n"}},"path":"modo-noturno-com-css-variables"}
